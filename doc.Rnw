\documentclass{article}
\usepackage[hidelinks]{hyperref}
\begin{document}
This will be a momentum strategy.  Much of this will come from \href{http://rbresearch.wordpress.com/2012/08/23/momentum-with-r-part-1/}{Ross Bennett's blog}.  
\section{Preparation}
<<<{prepare, warning=FALSE, error = FALSE, message = FALSE>>=
require(quantstrat)
currency("USD")
symbols = c("XLY", "XLP", "XLE", "XLF")
stock(symbols, currency="USD",multiplier=1)
getSymbols(symbols, src='yahoo', index.class=c("POSIXt","POSIXct"), 
           from='2000-01-01')
@
Convert to monthly and drop all columns except Adjusted Close
<<Convert, >>=
for(symbol in symbols) {
  x <- get(symbol)
  x <- to.monthly(x,indexAt='lastof',drop.time=TRUE)
  indexFormat(x) <- '%Y-%m-%d'
  colnames(x) <- gsub("x",symbol,colnames(x))
  x <- x[,6] #drops all columns except Adjusted Close which is 6th column
  assign(symbol,x)
}
@
There are now four objects that have an adjusted close.Merge the symbols into a single object with just the close prices
<<merge>>=
symbols_close <- do.call(merge, lapply(symbols, get))
head(symbols_close)                   
@
Now calculate the three period rate of change so that the returns can be ranked to see where the momentum lies. 
<<roc>>=
roc <- ROC(symbols_close, n = 3, type = 'discrete')
head(roc)
@
Now apply the rank function across each column. The symbol with the highest return has the rank one for each month. This will be an xts object with ranks. 
<<rank>>=}
r <- as.xts(t(apply(-roc, 1, rank)))
head(r)
@
\section{Functions}
\subsection{RankingRB}
Computes the rank of an xts object of ranking factors.  Ranking factors are the factors that are ranked (i.e. asset returns)
\begin{itemize}
\item{args}
  x = xts object of ranking factors
  
\item{Returns}
  Returns an xts object with ranks
  (e.g. for ranking asset returns, the asset with the greatest return
  receives a  rank of 1)
\end{itemize}
<<RankRB>>=
RankRB <- function(x){
  r <- as.xts(t(apply(-x, 1, rank, na.last = "keep")))
  return(r)
}
@
\subsection{MontlyAd}
   Converts daily data to monthly and returns only the monthly close. 
\begin{itemize}
\item Args:
  x = daily price data from Yahoo Finance
  
\item{Returns}
  xts object with the monthly adjusted close prices
\end{itemize}
<<MonthlyAd>>=
MonthlyAd <- function(x){
  sym <- sub("\\..*$", "", names(x)[1])
  Ad(to.monthly(x, indexAt = 'lastof', drop.time = TRUE, name = sym))
}
@
\subsection{CAGR}
Function to compute the CAGR given simple returns
\begin{itemize}
\item Args:
  x = xts of simple returns
  m = periods per year (i.e. monthly = 12, daily = 252)
\item Returns the Compound Annual Growth Rate
\end{itemize}  
<<CAGR>>=
CAGR<- function(x, m){
  x <- na.omit(x)
  cagr <- apply(x, 2, function(x, m) prod(1 + x)^(1 / (length(x) / m)) - 1, m = m)
  return(cagr)
}
@
\subsection{SimpleMomentumTest}
Returns a list containing a matrix of individual asset returns and the comnbined returns. Trade the top n asset(s) if the rank of last period is less than or equal to n,then I would experience the return for this month.
\begin{itemize}
\item args:
  xts.ret = xts of one period returns
  xts.rank = xts of ranks
  n = number of top ranked assets to trade
  ret.fill.na = number of return periods to fill with NA
\item Returns:
  An xts object of simple returns
\end{itemize}
<<SimpleMomentumTest>>=    
SimpleMomentumTest <- function(xts.ret, xts.rank, n = 1, ret.fill.na = 3){
  # returns a list containing a matrix of individual asset returns
  # and the comnbined returns
  # args:
  #  xts.ret = xts of one period returns
  #  xts.rank = xts of ranks
  #  n = number of top ranked assets to trade
  #  ret.fill.na = number of return periods to fill with NA
  #
  # Returns:
  #  returns an xts object of simple returns
  
  # trade the top n asset(s)
  # if the rank of last period is less than or equal to n,
  # then I would experience the return for this month.
  
  # lag the rank object by one period to avoid look ahead bias
  lag.rank <- lag(xts.rank, k = 1, na.pad = TRUE)
  n2 <- nrow(lag.rank[is.na(lag.rank[,1]) == TRUE])
  z <- max(n2, ret.fill.na)
  
  # for trading the top ranked asset, replace all ranks above n
  # with NA to set up for element wise multiplication to get
  # the realized returns
  lag.rank <- as.matrix(lag.rank)
  lag.rank[lag.rank > n] <- NA
  # set the element to 1 for assets ranked <= to rank
  lag.rank[lag.rank <= n] <- 1
  
  # element wise multiplication of the
  # 1 period return matrix and lagged rank matrix
  mat.ret <- as.matrix(xts.ret) * lag.rank
  
  # average the rows of the mat.ret to get the
  # return for that period
  vec.ret <- rowMeans(mat.ret, na.rm = TRUE)
  vec.ret[1:z] <- NA
  
  # convert to an xts object
  vec.ret <- xts(x = vec.ret, order.by = index(xts.ret))
  f <- list(mat = mat.ret, ret = vec.ret, rank = lag.rank)
  return(f)
}
@

\end{document}